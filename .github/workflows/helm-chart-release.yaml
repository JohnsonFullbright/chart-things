name: Release helm chart

on:
  push:
    branches:
    - main
    
env:
  REGISTRY: ghcr.io/${{ github.repository }}

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      packages: write
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Check Helm generated values are up-to-date before releasing
        run: |
          make check-generated-values

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.8.0

      - name: Generate values.yaml
        run: |
          make generate-values

      - name: Install cosign
        uses: sigstore/cosign-installer@main

      - name: Run chart-releaser
        uses: helm/chart-releaser-action@v1.4.0
        with:
          charts_dir: charts
        env:
          CR_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          CR_SKIP_EXISTING: true

      - name: Prepare GH pages readme
        run: |
          mkdir -p ./to-gh-pages
          cat charts/kubewarden-controller/README.md >> charts/README.md
          echo >> charts/README.md
          cp -f charts/README.md ./to-gh-pages

      - name: Deploy readme to GH pages
        uses: peaceiris/actions-gh-pages@v3.8.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./to-gh-pages
          keep_files: true
          enable_jekyll: true

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate, sign and publish charts in OCI registry
        shell: bash
        run: |
          set -e
          # .cr-release-packages is the directory used by the Helm releaser from a previous step
          chart_directory=.cr-release-packages
          if [ ! -d "$chart_directory" ]; then
            echo "$chart_directory does not exist. Assuming no charts update"
            exit 0
          fi
          
          charts=$(find $chart_directory -maxdepth 1 -mindepth 1 -type f)
          for chart in $charts; do
            chart_name=$(helm show chart $chart | yq '.name' | sed 's/"//g')
            chart_verison=$(helm show chart $chart | yq '.version' | sed 's/"//g')
            package_file=".cr-release-packages/$chart_name-$chart_verison.tgz"
            push_output=$(helm push $package_file "oci://$REGISTRY/charts/$chart_name")
            chart_url=$(echo $push_output | sed -n 's/Pushed: \(.*\):.* Digest: \(.*\)$/\1\@\2/p')
            cosign sign "$chart_url"
          done
        env:
          COSIGN_EXPERIMENTAL: 1
